// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSqueezerPage = coreglib.Type(C.adw_squeezer_page_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSqueezerPage, F: marshalSqueezerPage},
	})
}

// SqueezerPageOverrides contains methods that are overridable.
type SqueezerPageOverrides struct {
}

func defaultSqueezerPageOverrides(v *SqueezerPage) SqueezerPageOverrides {
	return SqueezerPageOverrides{}
}

// SqueezerPage: auxiliary class used by squeezer.
type SqueezerPage struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*SqueezerPage)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SqueezerPage, *SqueezerPageClass, SqueezerPageOverrides](
		GTypeSqueezerPage,
		initSqueezerPageClass,
		wrapSqueezerPage,
		defaultSqueezerPageOverrides,
	)
}

func initSqueezerPageClass(gclass unsafe.Pointer, overrides SqueezerPageOverrides, classInitFunc func(*SqueezerPageClass)) {
	if classInitFunc != nil {
		class := (*SqueezerPageClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSqueezerPage(obj *coreglib.Object) *SqueezerPage {
	return &SqueezerPage{
		Object: obj,
	}
}

func marshalSqueezerPage(p uintptr) (interface{}, error) {
	return wrapSqueezerPage(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Child returns the squeezer child to which self belongs.
//
// The function returns the following values:
//
//   - widget: child to which self belongs.
//
func (self *SqueezerPage) Child() gtk.Widgetter {
	var _arg0 *C.AdwSqueezerPage // out
	var _cret *C.GtkWidget       // in

	_arg0 = (*C.AdwSqueezerPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_squeezer_page_get_child(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gtk.Widgetter)
			return ok
		})
		rv, ok := casted.(gtk.Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// Enabled gets whether self is enabled.
//
// The function returns the following values:
//
//   - ok: whether self is enabled.
//
func (self *SqueezerPage) Enabled() bool {
	var _arg0 *C.AdwSqueezerPage // out
	var _cret C.gboolean         // in

	_arg0 = (*C.AdwSqueezerPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_squeezer_page_get_enabled(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetEnabled sets whether self is enabled.
//
// If a child is disabled, it will be ignored when looking for the child fitting
// the available size best.
//
// This allows to programmatically and prematurely hide a child even if it fits
// in the available space.
//
// This can be used e.g. to ensure a certain child is hidden below a certain
// window width, or any other constraint you find suitable.
//
// The function takes the following parameters:
//
//   - enabled: whether self is enabled.
//
func (self *SqueezerPage) SetEnabled(enabled bool) {
	var _arg0 *C.AdwSqueezerPage // out
	var _arg1 C.gboolean         // out

	_arg0 = (*C.AdwSqueezerPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.adw_squeezer_page_set_enabled(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(enabled)
}

// SqueezerClass: instance of this type is always passed by reference.
type SqueezerClass struct {
	*squeezerClass
}

// squeezerClass is the struct that's finalized.
type squeezerClass struct {
	native *C.AdwSqueezerClass
}

func (s *SqueezerClass) ParentClass() *gtk.WidgetClass {
	valptr := &s.native.parent_class
	var _v *gtk.WidgetClass // out
	_v = (*gtk.WidgetClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// SqueezerPageClass: instance of this type is always passed by reference.
type SqueezerPageClass struct {
	*squeezerPageClass
}

// squeezerPageClass is the struct that's finalized.
type squeezerPageClass struct {
	native *C.AdwSqueezerPageClass
}
