// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_tab_bar_get_type()), F: marshalTabBarrer},
	})
}

// TabBar: tab bar for adw.TabView.
//
// The AdwTabBar widget is a tab bar that can be used with conjunction with
// AdwTabView.
//
// AdwTabBar can autohide and can optionally contain action widgets on both
// sides of the tabs.
//
// When there's not enough space to show all the tabs, AdwTabBar will scroll
// them. Pinned tabs always stay visible and aren't a part of the scrollable
// area.
//
//
// CSS nodes
//
// AdwTabBar has a single CSS node with name tabbar.
type TabBar struct {
	_ [0]func() // equal guard
	gtk.Widget
}

var (
	_ gtk.Widgetter = (*TabBar)(nil)
)

func wrapTabBar(obj *externglib.Object) *TabBar {
	return &TabBar{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalTabBarrer(p uintptr) (interface{}, error) {
	return wrapTabBar(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectExtraDragDrop: this signal is emitted when content is dropped onto a
// tab.
//
// The content must be of one of the types set up via
// adw.TabBar.SetupExtraDropTarget().
//
// See gtk.DropTarget::drop.
func (self *TabBar) ConnectExtraDragDrop(f func(page TabPage, value externglib.Value) bool) externglib.SignalHandle {
	return self.Connect("extra-drag-drop", f)
}

// NewTabBar creates a new AdwTabBar.
//
// The function returns the following values:
//
//    - tabBar: newly created AdwTabBar.
//
func NewTabBar() *TabBar {
	var _cret *C.AdwTabBar // in

	_cret = C.adw_tab_bar_new()

	var _tabBar *TabBar // out

	_tabBar = wrapTabBar(externglib.Take(unsafe.Pointer(_cret)))

	return _tabBar
}

// Autohide gets whether the tabs automatically hide.
//
// The function returns the following values:
//
//    - ok: whether the tabs automatically hide.
//
func (self *TabBar) Autohide() bool {
	var _arg0 *C.AdwTabBar // out
	var _cret C.gboolean   // in

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_tab_bar_get_autohide(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EndActionWidget gets the widget shown after the tabs.
//
// The function returns the following values:
//
//    - widget (optional) shown after the tabs.
//
func (self *TabBar) EndActionWidget() gtk.Widgetter {
	var _arg0 *C.AdwTabBar // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_tab_bar_get_end_action_widget(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			casted := object.WalkCast(func(obj externglib.Objector) bool {
				_, ok := obj.(gtk.Widgetter)
				return ok
			})
			rv, ok := casted.(gtk.Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// ExpandTabs gets whether tabs expand to full width.
//
// The function returns the following values:
//
//    - ok: whether tabs expand to full width.
//
func (self *TabBar) ExpandTabs() bool {
	var _arg0 *C.AdwTabBar // out
	var _cret C.gboolean   // in

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_tab_bar_get_expand_tabs(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Inverted gets whether tabs use inverted layout.
//
// The function returns the following values:
//
//    - ok: whether tabs use inverted layout.
//
func (self *TabBar) Inverted() bool {
	var _arg0 *C.AdwTabBar // out
	var _cret C.gboolean   // in

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_tab_bar_get_inverted(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsOverflowing gets whether self is overflowing.
//
// The function returns the following values:
//
//    - ok: whether self is overflowing.
//
func (self *TabBar) IsOverflowing() bool {
	var _arg0 *C.AdwTabBar // out
	var _cret C.gboolean   // in

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_tab_bar_get_is_overflowing(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// StartActionWidget gets the widget shown before the tabs.
//
// The function returns the following values:
//
//    - widget (optional) shown before the tabs.
//
func (self *TabBar) StartActionWidget() gtk.Widgetter {
	var _arg0 *C.AdwTabBar // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_tab_bar_get_start_action_widget(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			casted := object.WalkCast(func(obj externglib.Objector) bool {
				_, ok := obj.(gtk.Widgetter)
				return ok
			})
			rv, ok := casted.(gtk.Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// TabsRevealed gets whether the tabs are currently revealed.
//
// The function returns the following values:
//
//    - ok: whether the tabs are currently revealed.
//
func (self *TabBar) TabsRevealed() bool {
	var _arg0 *C.AdwTabBar // out
	var _cret C.gboolean   // in

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_tab_bar_get_tabs_revealed(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// View gets the tab view self controls.
//
// The function returns the following values:
//
//    - tabView (optional): view self controls.
//
func (self *TabBar) View() *TabView {
	var _arg0 *C.AdwTabBar  // out
	var _cret *C.AdwTabView // in

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_tab_bar_get_view(_arg0)
	runtime.KeepAlive(self)

	var _tabView *TabView // out

	if _cret != nil {
		_tabView = wrapTabView(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _tabView
}

// SetAutohide sets whether the tabs automatically hide.
//
// The function takes the following parameters:
//
//    - autohide: whether the tabs automatically hide.
//
func (self *TabBar) SetAutohide(autohide bool) {
	var _arg0 *C.AdwTabBar // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))
	if autohide {
		_arg1 = C.TRUE
	}

	C.adw_tab_bar_set_autohide(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(autohide)
}

// SetEndActionWidget sets the widget to show after the tabs.
//
// The function takes the following parameters:
//
//    - widget (optional) to show after the tabs.
//
func (self *TabBar) SetEndActionWidget(widget gtk.Widgetter) {
	var _arg0 *C.AdwTabBar // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))
	if widget != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	}

	C.adw_tab_bar_set_end_action_widget(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}

// SetExpandTabs sets whether tabs expand to full width.
//
// The function takes the following parameters:
//
//    - expandTabs: whether to expand tabs.
//
func (self *TabBar) SetExpandTabs(expandTabs bool) {
	var _arg0 *C.AdwTabBar // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))
	if expandTabs {
		_arg1 = C.TRUE
	}

	C.adw_tab_bar_set_expand_tabs(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(expandTabs)
}

// SetInverted sets whether tabs tabs use inverted layout.
//
// The function takes the following parameters:
//
//    - inverted: whether tabs use inverted layout.
//
func (self *TabBar) SetInverted(inverted bool) {
	var _arg0 *C.AdwTabBar // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))
	if inverted {
		_arg1 = C.TRUE
	}

	C.adw_tab_bar_set_inverted(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(inverted)
}

// SetStartActionWidget sets the widget to show before the tabs.
//
// The function takes the following parameters:
//
//    - widget (optional) to show before the tabs.
//
func (self *TabBar) SetStartActionWidget(widget gtk.Widgetter) {
	var _arg0 *C.AdwTabBar // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))
	if widget != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	}

	C.adw_tab_bar_set_start_action_widget(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}

// SetView sets the tab view self controls.
//
// The function takes the following parameters:
//
//    - view (optional): tab view.
//
func (self *TabBar) SetView(view *TabView) {
	var _arg0 *C.AdwTabBar  // out
	var _arg1 *C.AdwTabView // out

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))
	if view != nil {
		_arg1 = (*C.AdwTabView)(unsafe.Pointer(view.Native()))
	}

	C.adw_tab_bar_set_view(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(view)
}

// SetupExtraDropTarget sets the supported types for this drop target.
//
// Sets up an extra drop target on tabs.
//
// This allows to drag arbitrary content onto tabs, for example URLs in a web
// browser.
//
// If a tab is hovered for a certain period of time while dragging the content,
// it will be automatically selected.
//
// The adw.TabBar::extra-drag-drop signal can be used to handle the drop.
//
// The function takes the following parameters:
//
//    - actions: supported actions.
//    - types (optional): all supported GTypes that can be dropped.
//
func (self *TabBar) SetupExtraDropTarget(actions gdk.DragAction, types []externglib.Type) {
	var _arg0 *C.AdwTabBar    // out
	var _arg1 C.GdkDragAction // out
	var _arg2 *C.GType        // out
	var _arg3 C.gsize

	_arg0 = (*C.AdwTabBar)(unsafe.Pointer(self.Native()))
	_arg1 = C.GdkDragAction(actions)
	_arg3 = (C.gsize)(len(types))
	_arg2 = (*C.GType)(C.calloc(C.size_t(len(types)), C.size_t(C.sizeof_GType)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice((*C.GType)(_arg2), len(types))
		for i := range types {
			out[i] = C.GType(types[i])
		}
	}

	C.adw_tab_bar_setup_extra_drop_target(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(self)
	runtime.KeepAlive(actions)
	runtime.KeepAlive(types)
}
