// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"fmt"
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_color_scheme_get_type()), F: marshalColorScheme},
		{T: externglib.Type(C.adw_style_manager_get_type()), F: marshalStyleManagerer},
	})
}

// ColorScheme: application color schemes for adw.StyleManager:color-scheme.
type ColorScheme int

const (
	// ColorSchemeDefault: inherit the parent color-scheme. When set on the
	// AdwStyleManager returned by adw.StyleManager().GetDefault, it's
	// equivalent to ADW_COLOR_SCHEME_PREFER_LIGHT.
	ColorSchemeDefault ColorScheme = iota
	// ColorSchemeForceLight always use light appearance.
	ColorSchemeForceLight
	// ColorSchemePreferLight: use light appearance unless the system prefers
	// dark colors.
	ColorSchemePreferLight
	// ColorSchemePreferDark: use dark appearance unless the system prefers
	// prefers light colors.
	ColorSchemePreferDark
	// ColorSchemeForceDark always use dark appearance.
	ColorSchemeForceDark
)

func marshalColorScheme(p uintptr) (interface{}, error) {
	return ColorScheme(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for ColorScheme.
func (c ColorScheme) String() string {
	switch c {
	case ColorSchemeDefault:
		return "Default"
	case ColorSchemeForceLight:
		return "ForceLight"
	case ColorSchemePreferLight:
		return "PreferLight"
	case ColorSchemePreferDark:
		return "PreferDark"
	case ColorSchemeForceDark:
		return "ForceDark"
	default:
		return fmt.Sprintf("ColorScheme(%d)", c)
	}
}

// StyleManager class for managing application-wide styling.
//
// AdwStyleManager provides a way to query and influence the application styles,
// such as whether to use dark or high contrast appearance.
//
// It allows to set the color scheme via the adw.StyleManager:color-scheme
// property, and to query the current appearance, as well as whether a
// system-wide color scheme preference exists.
type StyleManager struct {
	*externglib.Object
}

func wrapStyleManager(obj *externglib.Object) *StyleManager {
	return &StyleManager{
		Object: obj,
	}
}

func marshalStyleManagerer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapStyleManager(obj), nil
}

// ColorScheme gets the requested application color scheme.
func (self *StyleManager) ColorScheme() ColorScheme {
	var _arg0 *C.AdwStyleManager // out
	var _cret C.AdwColorScheme   // in

	_arg0 = (*C.AdwStyleManager)(unsafe.Pointer(self.Native()))

	_cret = C.adw_style_manager_get_color_scheme(_arg0)
	runtime.KeepAlive(self)

	var _colorScheme ColorScheme // out

	_colorScheme = ColorScheme(_cret)

	return _colorScheme
}

// Dark gets whether the application is using dark appearance.
func (self *StyleManager) Dark() bool {
	var _arg0 *C.AdwStyleManager // out
	var _cret C.gboolean         // in

	_arg0 = (*C.AdwStyleManager)(unsafe.Pointer(self.Native()))

	_cret = C.adw_style_manager_get_dark(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Display gets the display the style manager is associated with.
//
// The display will be NULL for the style manager returned by
// adw.StyleManager().GetDefault.
func (self *StyleManager) Display() *gdk.Display {
	var _arg0 *C.AdwStyleManager // out
	var _cret *C.GdkDisplay      // in

	_arg0 = (*C.AdwStyleManager)(unsafe.Pointer(self.Native()))

	_cret = C.adw_style_manager_get_display(_arg0)
	runtime.KeepAlive(self)

	var _display *gdk.Display // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_display = &gdk.Display{
			Object: obj,
		}
	}

	return _display
}

// HighContrast gets whether the application is using high contrast appearance.
func (self *StyleManager) HighContrast() bool {
	var _arg0 *C.AdwStyleManager // out
	var _cret C.gboolean         // in

	_arg0 = (*C.AdwStyleManager)(unsafe.Pointer(self.Native()))

	_cret = C.adw_style_manager_get_high_contrast(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SystemSupportsColorSchemes gets whether the system supports color schemes.
func (self *StyleManager) SystemSupportsColorSchemes() bool {
	var _arg0 *C.AdwStyleManager // out
	var _cret C.gboolean         // in

	_arg0 = (*C.AdwStyleManager)(unsafe.Pointer(self.Native()))

	_cret = C.adw_style_manager_get_system_supports_color_schemes(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetColorScheme sets the requested application color scheme.
//
// The effective appearance will be decided based on the application color
// scheme and the system preferred color scheme. The adw.StyleManager:dark
// property can be used to query the current effective appearance.
func (self *StyleManager) SetColorScheme(colorScheme ColorScheme) {
	var _arg0 *C.AdwStyleManager // out
	var _arg1 C.AdwColorScheme   // out

	_arg0 = (*C.AdwStyleManager)(unsafe.Pointer(self.Native()))
	_arg1 = C.AdwColorScheme(colorScheme)

	C.adw_style_manager_set_color_scheme(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(colorScheme)
}

// StyleManagerGetDefault gets the default AdwStyleManager instance.
//
// It manages all gdk.Display instances unless the style manager for that
// display has an override.
//
// See adw.StyleManager().GetForDisplay.
func StyleManagerGetDefault() *StyleManager {
	var _cret *C.AdwStyleManager // in

	_cret = C.adw_style_manager_get_default()

	var _styleManager *StyleManager // out

	_styleManager = wrapStyleManager(externglib.Take(unsafe.Pointer(_cret)))

	return _styleManager
}

// StyleManagerGetForDisplay gets the AdwStyleManager instance managing display.
//
// It can be used to override styles for that specific display instead of the
// whole application.
//
// Most applications should use adw.StyleManager().GetDefault instead.
func StyleManagerGetForDisplay(display *gdk.Display) *StyleManager {
	var _arg1 *C.GdkDisplay      // out
	var _cret *C.AdwStyleManager // in

	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	_cret = C.adw_style_manager_get_for_display(_arg1)
	runtime.KeepAlive(display)

	var _styleManager *StyleManager // out

	_styleManager = wrapStyleManager(externglib.Take(unsafe.Pointer(_cret)))

	return _styleManager
}
