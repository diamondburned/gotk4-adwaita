// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_bin_get_type()), F: marshalBinner},
	})
}

// Bin: widget with one child.
//
// The AdwBin widget has only one child, set with the adw.Bin:child property.
//
// It is useful for deriving subclasses, since it provides common code needed
// for handling a single child widget.
type Bin struct {
	gtk.Widget
}

func wrapBin(obj *externglib.Object) *Bin {
	return &Bin{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
			Object: obj,
		},
	}
}

func marshalBinner(p uintptr) (interface{}, error) {
	return wrapBin(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewBin creates a new AdwBin.
func NewBin() *Bin {
	var _cret *C.GtkWidget // in

	_cret = C.adw_bin_new()

	var _bin *Bin // out

	_bin = wrapBin(externglib.Take(unsafe.Pointer(_cret)))

	return _bin
}

// Child gets the child widget of self.
func (self *Bin) Child() gtk.Widgetter {
	var _arg0 *C.AdwBin    // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.AdwBin)(unsafe.Pointer(self.Native()))

	_cret = C.adw_bin_get_child(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			rv, ok := (externglib.CastObject(object)).(gtk.Widgetter)
			if !ok {
				panic("object of type " + object.TypeFromInstance().String() + " is not gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// SetChild sets the child widget of self.
//
// The function takes the following parameters:
//
//    - child widget.
//
func (self *Bin) SetChild(child gtk.Widgetter) {
	var _arg0 *C.AdwBin    // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.AdwBin)(unsafe.Pointer(self.Native()))
	if child != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	}

	C.adw_bin_set_child(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}
