// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_expander_row_get_type()), F: marshalExpanderRower},
	})
}

// ExpanderRow: gtk.ListBoxRow used to reveal widgets.
//
// The AdwExpanderRow widget allows the user to reveal or hide widgets below it.
// It also allows the user to enable the expansion of the row, allowing to
// disable all that the row contains.
//
//
// AdwExpanderRow as GtkBuildable
//
// The AdwExpanderRow implementation of the gtk.Buildable interface supports
// adding a child as an action widget by specifying “action” as the “type”
// attribute of a <child> element.
//
// It also supports adding it as a prefix widget by specifying “prefix” as the
// “type” attribute of a <child> element.
//
//
// CSS nodes
//
// AdwExpanderRow has a main CSS node with name row and the .expander style
// class. It has the .empty style class when it contains no children.
//
// It contains the subnodes row.header for its main embedded row, list.nested
// for the list it can expand, and image.expander-row-arrow for its arrow.
type ExpanderRow struct {
	PreferencesRow
}

var (
	_ gtk.Widgetter       = (*ExpanderRow)(nil)
	_ externglib.Objector = (*ExpanderRow)(nil)
)

func wrapExpanderRow(obj *externglib.Object) *ExpanderRow {
	return &ExpanderRow{
		PreferencesRow: PreferencesRow{
			ListBoxRow: gtk.ListBoxRow{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Accessible: gtk.Accessible{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
					ConstraintTarget: gtk.ConstraintTarget{
						Object: obj,
					},
					Object: obj,
				},
				Actionable: gtk.Actionable{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Accessible: gtk.Accessible{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
						ConstraintTarget: gtk.ConstraintTarget{
							Object: obj,
						},
						Object: obj,
					},
				},
				Object: obj,
			},
		},
	}
}

func marshalExpanderRower(p uintptr) (interface{}, error) {
	return wrapExpanderRow(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewExpanderRow creates a new AdwExpanderRow.
func NewExpanderRow() *ExpanderRow {
	var _cret *C.GtkWidget // in

	_cret = C.adw_expander_row_new()

	var _expanderRow *ExpanderRow // out

	_expanderRow = wrapExpanderRow(externglib.Take(unsafe.Pointer(_cret)))

	return _expanderRow
}

// Add adds a widget to self.
//
// The widget will appear in the expanding list below self.
//
// The function takes the following parameters:
//
//    - child: widget.
//
func (self *ExpanderRow) Add(child gtk.Widgetter) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.adw_expander_row_add(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}

// AddAction adds an action widget to self.
//
// The function takes the following parameters:
//
//    - widget: widget.
//
func (self *ExpanderRow) AddAction(widget gtk.Widgetter) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.adw_expander_row_add_action(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}

// AddPrefix adds a prefix widget to self.
//
// The function takes the following parameters:
//
//    - widget: widget.
//
func (self *ExpanderRow) AddPrefix(widget gtk.Widgetter) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.adw_expander_row_add_prefix(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}

// EnableExpansion gets whether the expansion of self is enabled.
func (self *ExpanderRow) EnableExpansion() bool {
	var _arg0 *C.AdwExpanderRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_enable_expansion(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Expanded gets whether self is expanded.
func (self *ExpanderRow) Expanded() bool {
	var _arg0 *C.AdwExpanderRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_expanded(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IconName gets the icon name for self.
func (self *ExpanderRow) IconName() string {
	var _arg0 *C.AdwExpanderRow // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_icon_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// ShowEnableSwitch gets whether the switch enabling the expansion of self is
// visible.
func (self *ExpanderRow) ShowEnableSwitch() bool {
	var _arg0 *C.AdwExpanderRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_show_enable_switch(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Subtitle gets the subtitle for self.
func (self *ExpanderRow) Subtitle() string {
	var _arg0 *C.AdwExpanderRow // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_subtitle(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UseUnderline gets whether underlines in title or subtitle are interpreted as
// mnemonics.
func (self *ExpanderRow) UseUnderline() bool {
	var _arg0 *C.AdwExpanderRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_use_underline(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

//
// The function takes the following parameters:
//

//
func (self *ExpanderRow) Remove(child gtk.Widgetter) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.adw_expander_row_remove(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}

// SetEnableExpansion sets whether the expansion of self is enabled.
//
// The function takes the following parameters:
//
//    - enableExpansion: whether to enable the expansion.
//
func (self *ExpanderRow) SetEnableExpansion(enableExpansion bool) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if enableExpansion {
		_arg1 = C.TRUE
	}

	C.adw_expander_row_set_enable_expansion(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(enableExpansion)
}

// SetExpanded sets whether self is expanded.
//
// The function takes the following parameters:
//
//    - expanded: whether to expand the row.
//
func (self *ExpanderRow) SetExpanded(expanded bool) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if expanded {
		_arg1 = C.TRUE
	}

	C.adw_expander_row_set_expanded(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(expanded)
}

// SetIconName sets the icon name for self.
//
// The function takes the following parameters:
//
//    - iconName: icon name.
//
func (self *ExpanderRow) SetIconName(iconName string) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.char           // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if iconName != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(iconName)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_expander_row_set_icon_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(iconName)
}

// SetShowEnableSwitch sets whether the switch enabling the expansion of self is
// visible.
//
// The function takes the following parameters:
//
//    - showEnableSwitch: whether to show the switch enabling the expansion.
//
func (self *ExpanderRow) SetShowEnableSwitch(showEnableSwitch bool) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if showEnableSwitch {
		_arg1 = C.TRUE
	}

	C.adw_expander_row_set_show_enable_switch(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(showEnableSwitch)
}

// SetSubtitle sets the subtitle for self.
//
// The function takes the following parameters:
//
//    - subtitle: subtitle.
//
func (self *ExpanderRow) SetSubtitle(subtitle string) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.char           // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(subtitle)))
	defer C.free(unsafe.Pointer(_arg1))

	C.adw_expander_row_set_subtitle(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(subtitle)
}

// SetUseUnderline sets whether underlines in title or subtitle are interpreted
// as mnemonics.
//
// The function takes the following parameters:
//
//    - useUnderline: whether underlines are interpreted as mnemonics.
//
func (self *ExpanderRow) SetUseUnderline(useUnderline bool) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if useUnderline {
		_arg1 = C.TRUE
	}

	C.adw_expander_row_set_use_underline(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(useUnderline)
}
