// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_clamp_scrollable_get_type()), F: marshalClampScrollabler},
	})
}

// ClampScrollable: scrollable adw.Clamp.
//
// AdwClampScrollable is a variant of adw.Clamp that implements the
// gtk.Scrollable interface.
//
// The primary use case for AdwClampScrollable is clamping gtk.ListView.
type ClampScrollable struct {
	gtk.Widget

	gtk.Orientable
	gtk.Scrollable
	*externglib.Object
}

func wrapClampScrollable(obj *externglib.Object) *ClampScrollable {
	return &ClampScrollable{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
			Object: obj,
		},
		Orientable: gtk.Orientable{
			Object: obj,
		},
		Scrollable: gtk.Scrollable{
			Object: obj,
		},
		Object: obj,
	}
}

func marshalClampScrollabler(p uintptr) (interface{}, error) {
	return wrapClampScrollable(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewClampScrollable creates a new AdwClampScrollable.
func NewClampScrollable() *ClampScrollable {
	var _cret *C.GtkWidget // in

	_cret = C.adw_clamp_scrollable_new()

	var _clampScrollable *ClampScrollable // out

	_clampScrollable = wrapClampScrollable(externglib.Take(unsafe.Pointer(_cret)))

	return _clampScrollable
}

// Child gets the child widget of self.
func (self *ClampScrollable) Child() gtk.Widgetter {
	var _arg0 *C.AdwClampScrollable // out
	var _cret *C.GtkWidget          // in

	_arg0 = (*C.AdwClampScrollable)(unsafe.Pointer(self.Native()))

	_cret = C.adw_clamp_scrollable_get_child(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			rv, ok := (externglib.CastObject(object)).(gtk.Widgetter)
			if !ok {
				panic("object of type " + object.TypeFromInstance().String() + " is not gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// MaximumSize gets the maximum size allocated to the child.
func (self *ClampScrollable) MaximumSize() int {
	var _arg0 *C.AdwClampScrollable // out
	var _cret C.int                 // in

	_arg0 = (*C.AdwClampScrollable)(unsafe.Pointer(self.Native()))

	_cret = C.adw_clamp_scrollable_get_maximum_size(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// TighteningThreshold gets the size above which the child is clamped.
func (self *ClampScrollable) TighteningThreshold() int {
	var _arg0 *C.AdwClampScrollable // out
	var _cret C.int                 // in

	_arg0 = (*C.AdwClampScrollable)(unsafe.Pointer(self.Native()))

	_cret = C.adw_clamp_scrollable_get_tightening_threshold(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SetChild sets the child widget of self.
//
// The function takes the following parameters:
//
//    - child widget.
//
func (self *ClampScrollable) SetChild(child gtk.Widgetter) {
	var _arg0 *C.AdwClampScrollable // out
	var _arg1 *C.GtkWidget          // out

	_arg0 = (*C.AdwClampScrollable)(unsafe.Pointer(self.Native()))
	if child != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	}

	C.adw_clamp_scrollable_set_child(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}

// SetMaximumSize sets the maximum size allocated to the child.
//
// The function takes the following parameters:
//
//    - maximumSize: maximum size.
//
func (self *ClampScrollable) SetMaximumSize(maximumSize int) {
	var _arg0 *C.AdwClampScrollable // out
	var _arg1 C.int                 // out

	_arg0 = (*C.AdwClampScrollable)(unsafe.Pointer(self.Native()))
	_arg1 = C.int(maximumSize)

	C.adw_clamp_scrollable_set_maximum_size(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(maximumSize)
}

// SetTighteningThreshold sets the size above which the child is clamped.
//
// The function takes the following parameters:
//
//    - tighteningThreshold: tightening threshold.
//
func (self *ClampScrollable) SetTighteningThreshold(tighteningThreshold int) {
	var _arg0 *C.AdwClampScrollable // out
	var _arg1 C.int                 // out

	_arg0 = (*C.AdwClampScrollable)(unsafe.Pointer(self.Native()))
	_arg1 = C.int(tighteningThreshold)

	C.adw_clamp_scrollable_set_tightening_threshold(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(tighteningThreshold)
}
