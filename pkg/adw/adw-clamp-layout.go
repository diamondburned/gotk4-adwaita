// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_clamp_layout_get_type()), F: marshalClampLayouter},
	})
}

// ClampLayout: layout manager constraining its children to a given size.
//
// AdwClampLayout constraints the size of the widgets it contains to a given
// maximum size. It will constrain the width if it is horizontal, or the height
// if it is vertical. The expansion of the children from their minimum to their
// maximum size is eased out for a smooth transition.
//
// If a child requires more than the requested maximum size, it will be
// allocated the minimum size it can fit in instead.
//
// Each child will get the style classes .large when it reached its maximum
// size, .small when it's allocated the full size, .medium in-between, or none
// if it hasn't been allocated yet.
type ClampLayout struct {
	gtk.LayoutManager

	gtk.Orientable
	*externglib.Object
}

var (
	_ gtk.LayoutManagerer = (*ClampLayout)(nil)
	_ externglib.Objector = (*ClampLayout)(nil)
)

func wrapClampLayout(obj *externglib.Object) *ClampLayout {
	return &ClampLayout{
		LayoutManager: gtk.LayoutManager{
			Object: obj,
		},
		Orientable: gtk.Orientable{
			Object: obj,
		},
		Object: obj,
	}
}

func marshalClampLayouter(p uintptr) (interface{}, error) {
	return wrapClampLayout(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewClampLayout creates a new AdwClampLayout.
func NewClampLayout() *ClampLayout {
	var _cret *C.GtkLayoutManager // in

	_cret = C.adw_clamp_layout_new()

	var _clampLayout *ClampLayout // out

	_clampLayout = wrapClampLayout(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _clampLayout
}

// MaximumSize gets the maximum size allocated to the children.
func (self *ClampLayout) MaximumSize() int {
	var _arg0 *C.AdwClampLayout // out
	var _cret C.int             // in

	_arg0 = (*C.AdwClampLayout)(unsafe.Pointer(self.Native()))

	_cret = C.adw_clamp_layout_get_maximum_size(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// TighteningThreshold gets the size above which the children are clamped.
func (self *ClampLayout) TighteningThreshold() int {
	var _arg0 *C.AdwClampLayout // out
	var _cret C.int             // in

	_arg0 = (*C.AdwClampLayout)(unsafe.Pointer(self.Native()))

	_cret = C.adw_clamp_layout_get_tightening_threshold(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SetMaximumSize sets the maximum size allocated to the children.
//
// The function takes the following parameters:
//
//    - maximumSize: maximum size.
//
func (self *ClampLayout) SetMaximumSize(maximumSize int) {
	var _arg0 *C.AdwClampLayout // out
	var _arg1 C.int             // out

	_arg0 = (*C.AdwClampLayout)(unsafe.Pointer(self.Native()))
	_arg1 = C.int(maximumSize)

	C.adw_clamp_layout_set_maximum_size(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(maximumSize)
}

// SetTighteningThreshold sets the size above which the children are clamped.
//
// The function takes the following parameters:
//
//    - tighteningThreshold: tightening threshold.
//
func (self *ClampLayout) SetTighteningThreshold(tighteningThreshold int) {
	var _arg0 *C.AdwClampLayout // out
	var _arg1 C.int             // out

	_arg0 = (*C.AdwClampLayout)(unsafe.Pointer(self.Native()))
	_arg1 = C.int(tighteningThreshold)

	C.adw_clamp_layout_set_tightening_threshold(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(tighteningThreshold)
}
