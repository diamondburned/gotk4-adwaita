// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeLeafletPage = coreglib.Type(C.adw_leaflet_page_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLeafletPage, F: marshalLeafletPage},
	})
}

// LeafletPageOverrides contains methods that are overridable.
type LeafletPageOverrides struct {
}

func defaultLeafletPageOverrides(v *LeafletPage) LeafletPageOverrides {
	return LeafletPageOverrides{}
}

// LeafletPage: auxiliary class used by leaflet.
type LeafletPage struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*LeafletPage)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*LeafletPage, *LeafletPageClass, LeafletPageOverrides](
		GTypeLeafletPage,
		initLeafletPageClass,
		wrapLeafletPage,
		defaultLeafletPageOverrides,
	)
}

func initLeafletPageClass(gclass unsafe.Pointer, overrides LeafletPageOverrides, classInitFunc func(*LeafletPageClass)) {
	if classInitFunc != nil {
		class := (*LeafletPageClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapLeafletPage(obj *coreglib.Object) *LeafletPage {
	return &LeafletPage{
		Object: obj,
	}
}

func marshalLeafletPage(p uintptr) (interface{}, error) {
	return wrapLeafletPage(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Child gets the leaflet child to which self belongs.
//
// The function returns the following values:
//
//   - widget: child to which self belongs.
//
func (self *LeafletPage) Child() gtk.Widgetter {
	var _arg0 *C.AdwLeafletPage // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.AdwLeafletPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_leaflet_page_get_child(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gtk.Widgetter)
			return ok
		})
		rv, ok := casted.(gtk.Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// Name gets the name of self.
//
// The function returns the following values:
//
//   - utf8 (optional): name of self.
//
func (self *LeafletPage) Name() string {
	var _arg0 *C.AdwLeafletPage // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwLeafletPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_leaflet_page_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Navigatable gets whether the child can be navigated to when folded.
//
// The function returns the following values:
//
//   - ok: whether self can be navigated to when folded.
//
func (self *LeafletPage) Navigatable() bool {
	var _arg0 *C.AdwLeafletPage // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwLeafletPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_leaflet_page_get_navigatable(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetName sets the name of the self.
//
// The function takes the following parameters:
//
//   - name (optional): new value to set.
//
func (self *LeafletPage) SetName(name string) {
	var _arg0 *C.AdwLeafletPage // out
	var _arg1 *C.char           // out

	_arg0 = (*C.AdwLeafletPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if name != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_leaflet_page_set_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)
}

// SetNavigatable sets whether self can be navigated to when folded.
//
// If FALSE, the child will be ignored by leaflet.GetAdjacentChild,
// leaflet.Navigate, and swipe gestures.
//
// This can be used used to prevent switching to widgets like separators.
//
// The function takes the following parameters:
//
//   - navigatable: whether self can be navigated to when folded.
//
func (self *LeafletPage) SetNavigatable(navigatable bool) {
	var _arg0 *C.AdwLeafletPage // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwLeafletPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if navigatable {
		_arg1 = C.TRUE
	}

	C.adw_leaflet_page_set_navigatable(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(navigatable)
}

// LeafletClass: instance of this type is always passed by reference.
type LeafletClass struct {
	*leafletClass
}

// leafletClass is the struct that's finalized.
type leafletClass struct {
	native *C.AdwLeafletClass
}

func (l *LeafletClass) ParentClass() *gtk.WidgetClass {
	valptr := &l.native.parent_class
	var _v *gtk.WidgetClass // out
	_v = (*gtk.WidgetClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// LeafletPageClass: instance of this type is always passed by reference.
type LeafletPageClass struct {
	*leafletPageClass
}

// leafletPageClass is the struct that's finalized.
type leafletPageClass struct {
	native *C.AdwLeafletPageClass
}
